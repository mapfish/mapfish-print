import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'war'
apply plugin: 'distribution'

defaultTasks 'build'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts" }
    maven { url "https://repo.osgeo.org/repository/release/" }
}

// the task `run` of the gretty plugin conflicts with the task with the same
// name of the plugin `application`. that's why the following tasks are defined
// manually.
task startScripts(type: CreateStartScripts) {
}
task print(type: JavaExec) {
    main = 'org.mapfish.print.cli.Main'
    classpath = sourceSets.main.runtimeClasspath
}

// define what should be included as distribution. usually this configuration
// is done when applying the plugin `application`. this is the default config
// as in: https://github.com/gradle/gradle/blob/7df34b3f00e743cbd8f9398acb08e67edf86b527/subprojects/plugins/src/main/groovy/org/gradle/api/plugins/ApplicationPlugin.groovy#L123-L134
distributions {
    main {
        contents {
            from(project.file('src/dist'))

            into('lib') {
                from(jar)
                from(project.configurations.runtime)
            }
            into('bin') {
                from(startScripts)
                fileMode = 0755
            }
        }
    }
}


def appDir = new File(project.buildDir, 'install')
installDist.doFirst {
    appDir.deleteDir()
}
tasks.withType(Javadoc) {
    options.encoding = 'utf-8'
    title = "Mapfish Print Core Module $version"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
task testCLI(type: Exec) {
    dependsOn installDist
    workingDir new File(appDir, 'core/bin')
    def cmd
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        cmd = ['cmd', '/c', 'print.bat']
    } else {
        cmd = ['./print']
    }

    File outputFile = new File(appDir, 'cliTestOutput.png')
    File configFile = file('src/test/resources/org/mapfish/print/cli/config.yaml')
    File v3ApiRequestFile = file('src/test/resources/org/mapfish/print/cli/v3Request.json')
    cmd.addAll([
            '-config', configFile.getAbsolutePath(),
            '-spec', v3ApiRequestFile.getAbsolutePath(),
            '-output', outputFile.getAbsolutePath()])
    commandLine cmd
    environment('JAVA_OPTS', '-Xmx500m')
    doFirst {
        println("Testing CLI application: $workingDir")
        outputFile.delete();
        assert !outputFile.exists()
    }
    doLast {
        assert outputFile.exists()
        assert outputFile.length() > 0
    }
}
test {
    maxHeapSize = "500M"
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}
build.dependsOn tasks.distZip, tasks.testCLI

configurations {
    compile.transitive = true
    compile.exclude module: 'jai_core'

    metrics {
        description = 'Libraries for measuring performance and load.  See http://metrics.codahale.com/'
    }
    geotools {
        description = 'Geotools spatial libraries'
    }
    jasper {
        description = 'Dependencies for the jasper reports generation'
    }

    // Want to use the slf4j bridge instead
    all*.exclude group: 'commons-logging'
    // Obscure stack trace if we let this dependency: https://stackoverflow.com/a/15808940
    all*.exclude module: 'xercesImpl'
}



dependencies {
    compile(
            "org.springframework:spring-context:5.3.23",
            "org.springframework:spring-web:5.3.23",
            "org.springframework:spring-webmvc:5.3.23",
            "org.springframework.security:spring-security-config:5.7.4",
            "org.springframework.security:spring-security-web:5.7.4",
            'com.thetransactioncompany:cors-filter:2.10',
            // Hibernate & Postgres
            'org.hibernate:hibernate-core:5.6.12.Final',
            'org.postgresql:postgresql:42.5.0',
            'com.vladmihalcea:hibernate-types-52:2.20.0',
            'com.mchange:c3p0:0.9.5.5',
            "org.springframework:spring-orm:5.3.23",
            "org.springframework:spring-jdbc:5.3.23",
            "org.springframework:spring-tx:5.3.23",
            "org.springframework:spring-test:5.3.23",
    )
    metrics(
            "io.dropwizard.metrics:metrics-core:4.2.12",
            "io.dropwizard.metrics:metrics-servlet:4.2.12",
            "io.dropwizard.metrics:metrics-httpclient:4.2.12",
            "io.dropwizard.metrics:metrics-servlets:4.2.12",
            "io.dropwizard.metrics:metrics-jvm:4.2.12",
            "io.dropwizard.metrics:metrics-jmx:4.2.12",
            "io.dropwizard.metrics:metrics-logback:4.2.12",
            'com.readytalk:metrics3-statsd:4.2.0'
    )
    geotools(
            "org.geotools:gt-epsg-hsql:27.1",
            "org.geotools:gt-render:27.1",
            "org.geotools:gt-geojson:27.1",
            "org.geotools:gt-geotiff:27.1",
            "org.geotools:gt-wms:27.1",
            "org.geotools.xsd:gt-xsd-gml3:27.1",
            "org.geotools:gt-svg:27.1",
            "org.geotools:gt-cql:27.1"
    )
    jasper(
            "net.sf.jasperreports:jasperreports:6.20.0",
            "org.codehaus.groovy:groovy-all:3.0.13",
            'ar.com.fdvs:DynamicJasper:5.3.6',
            "net.sf.jasperreports:jasperreports-fonts:6.20.0",
            "net.sf.jasperreports:jasperreports-functions:6.20.0",
            'joda-time:joda-time:2.12.0'
    )
    compile fileTree(dir: "$projectDir/libs", include: '*.jar')
    compile(
            'com.google.guava:guava:31.1-jre',
            "org.slf4j:slf4j-api:2.0.3",
            "org.slf4j:jcl-over-slf4j:2.0.3",
            "org.slf4j:jul-to-slf4j:2.0.3",
            "ch.qos.logback:logback-classic:1.4.4",
            "ch.qos.logback:logback-access:1.4.4",
            'org.json:json:20220924',
            'org.yaml:snakeyaml:1.33',
            'com.github.spullara.cli-parser:cli-parser:1.1.6',
            'org.apache.httpcomponents:httpclient:4.5.13',
            'com.sun.mail:javax.mail:1.6.2',
            'com.amazonaws:aws-java-sdk-s3:1.12.331',
            'com.adobe.xmp:xmpcore:6.1.11',
            'io.sentry:sentry-logback:6.6.0',
            'net.logstash.logback:logstash-logback-encoder:7.2',
    )

    compile(configurations.metrics) {
        exclude module: 'httpclient'
        exclude module: 'slf4j-api'
        exclude module: 'logback-classic'
    }
    compile(configurations.geotools)
    compile(configurations.jasper)

    compile(
            'org.apache.xmlgraphics:xmlgraphics-commons:2.7',
            "org.apache.xmlgraphics:batik-transcoder:1.16",
            "org.apache.xmlgraphics:batik-bridge:1.16",
            "org.apache.xmlgraphics:batik-codec:1.16",
            "org.apache.xmlgraphics:batik-svg-dom:1.16"
    )

    providedCompile('javax.servlet:javax.servlet-api:4.0.1')
    compileOnly "com.github.spotbugs:spotbugs-annotations:4.7.3"

    testCompile group: 'de.saly', name: 'javamail-mock2-fullmock', version: '0.5-beta4'
}

def gitRevision() {
    def gitRev = System.getenv('GIT_HEAD')
    return gitRev != null ? gitRev : "git rev-parse HEAD".execute().text.trim()
}

compileJava.options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']
compileTestJava.options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']

// Add version to resources, used for User-Agent string:
processResources {
    filter ReplaceTokens, tokens: [
        "application.version": version
    ]
}

def addManifestAttribute(manifest) {
    manifest.mainAttributes(
            'Mapfish-Print-Version': version,
            'Git-Revision': gitRevision(),
            'Build-Time': new Date().getDateTimeString(),
            'Build-By': System.getProperty('user.name', "unknown"),
            'Build-Java-Runtime-Name': System.getProperty('java.runtime.name', "unknown"),
            'Build-Java-Version': System.getProperty('java.version', "unknown"),
            'Build-OS-Arch': System.getProperty('os.arch', "unknown"),
            'Build-OS-Name': System.getProperty('os.name', "unknown")
    )
}

jar {
    enabled = true
    baseName = 'print-lib'
    addManifestAttribute(manifest)
}

war {
    baseName = 'print-servlet'
    addManifestAttribute(manifest)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task show {
}

show.doLast {
    war.classpath.files.each { println it }
}

task libJavadocJar(type: Jar, dependsOn: javadoc) {
    baseName = 'print-lib'
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}


task libSourcesJar(type: Jar) {
    baseName = 'print-lib'
    from sourceSets.main.allSource
    classifier = 'sources'
}


gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(print)) {
        if (project.hasProperty('printArgs')) {
            print.args printArgs.toString().split(" ").toList()
        } else {
            throw new IllegalArgumentException('You must supply the -PprintArgs="..." arguments.\nFor Example:\n\n./gradlew print ' +
                    '-PprintArgs="-config examples/config.yaml -spec examples/spec.json -output ./output.pdf"\n\n')
        }
    }
}

startScripts {
    // Clear up the classpath because the launcher jar has it.
    applicationName = 'print'
    mainClassName = 'org.mapfish.print.cli.Main'
    classpath = files(jar.archivePath)
    outputDir = new File(project.buildDir, 'scripts')

    doLast {
        fileTree(startScripts.outputDir).each { file ->
            def encoding = 'UTF-8'
            // There was a bug in the start script where all jars were listed and that failed in windows.
            // now I just have the main jar and replace it with * so that all jars in that directory
            // are loaded on classpath.
            file.setText(file.getText(encoding).replace(jar.archivePath.name, '*'), encoding)
        }
    }
}

task explodedWar(type: Sync) {
    into "${buildDir}/webapp"
    with war
}
