import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'war'
apply plugin: 'org.gretty'

def geoserverVersion = "2.8.2"

repositories {
    maven { url 'https://repo.osgeo.org/repository/release' }
    maven { url 'http://maven.restlet.org' }
    jcenter()
}

dependencies {
    compileOnly "org.geoserver.web:gs-web-app:$geoserverVersion"
    testCompile(
            project(':core')
    )
}

configurations {
    compile.exclude module: 'jai_core'

    // need to exclude those two to get rid of stuff taken from geotools dependencies (they break the tests)
    compile.exclude group: 'org.eclipse.emf', module: 'ecore'
    compile.exclude group: 'org.eclipse.emf', module: 'common'
    compile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

def examplesDir = "${project(':examples').projectDir}/src/test/resources/examples"

gretty {
    // configuration to serve a web-app containing test data required for
    // the integration tests
    servletContainer = 'jetty9'
    integrationTestTask = 'integrationTest'
}

task geoserverOriginalData(type: Copy) {
    description "Extract the Geoserver web app jar file"

    from {
        def path = configurations.compileOnly.find { it.name.startsWith("gs-web-app") }
        zipTree(file(path))
    }
    into "$buildDir/geoserver/"
}

task geoserverData(type: Copy, dependsOn: geoserverOriginalData) {
    description 'Append additional data to GeoServer'

    from fileTree('src/test/resources/data/')

    into 'build/geoserver/data/'
}

farm {
    // configuration to start a server running mfp, geoserver and the web-app
    // containing test data. start with `./gradlew examples:farmRun`
    systemProperty 'path_to_examples', examplesDir
    jvmArgs = ['-Xmx500M', "-DGEOSERVER_DATA_DIR=$buildDir/geoserver/data"]
    scanInterval = 0

    webapp "org.geoserver.web:gs-web-app:$geoserverVersion"
    webapp ':core'
    webapp ':examples'
}

// prevent that the tests target can be directly called. the integration tests
// must be run with `./gradlew examples:farmIntegrationTest` to make sure the
// server is running
test {}
test.onlyIf { false }

task integrationTest(type: Test) {
    testLogging {
        exceptionFormat = 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        events TestLogEvent.STANDARD_OUT
    }
    maxHeapSize = "750M"
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}
integrationTest.dependsOn ':core:compileJava', 'geoserverData'

afterEvaluate {
    build.dependsOn project.tasks['farmIntegrationTest']
    farmRun.dependsOn geoserverData
    farmBeforeIntegrationTest.dependsOn geoserverData
}
