buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.gretty:gretty:2.3.1'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.0'
        classpath 'de.marcphilipp.gradle:nexus-publish-plugin:0.2.0'
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0"
        classpath "se.bjurr.violations:violations-gradle-plugin:1.27"
    }
}

defaultTasks 'build'

wrapper {
    gradleVersion = '5.3'
    distributionType = Wrapper.DistributionType.ALL
}

allprojects {
    group = 'org.mapfish.print'
    version = '3.20.1'
    ext.junitVersion = "4.12"
    ext.springVersion = "5.1.9.RELEASE"
    ext.groovyVersion = "2.5.8"
    ext.spotbugVersion = '3.1.12'
    ext."signing.keyId" = signing_keyId
    ext."signing.secretKeyRingFile" = System.properties.get('user.home') + '/.gnupg/secring.gpg'
    ext."signing.password" = signing_password
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:2.0.2'
    }
}

apply plugin: 'org.gretty'

import org.akhikhl.gretty.AppStartTask

task appRun(type: AppStartTask) {
}

configure(subprojects.findAll { ['core', 'examples', 'docs'].contains(it.name) }) {
    repositories {
        mavenLocal()
        maven { url "http://download.osgeo.org/webdav/geotools" }
        mavenCentral()
        maven { url "https://dl.bintray.com/readytalk/maven" }
        maven { url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts" }
        maven { url "http://maven.geo-solutions.it" }
        maven { url "https://jaspersoft.artifactoryonline.com/jaspersoft/jr-ce-releases" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/" }
    }
}
configure(subprojects.findAll { ['core', 'examples'].contains(it.name) }) {
    apply plugin: 'java'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply plugin: 'checkstyle'
    apply plugin: 'se.bjurr.violations.violations-gradle-plugin'

    jar.dependsOn(checkstyleMain)

    checkstyle {
        toolVersion = "7.8.2"
        configFile = file("$rootProject.rootDir/checkstyle_checks.xml")
        configProperties = ['basedir': project.rootDir.path]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/reports/checkstyleReports")
    }
    checkstyleTest.enabled = false

    spotbugs {
        toolVersion = "${project.spotbugVersion}"
        ignoreFailures = true
        reportsDir = file("$project.buildDir/reports/spotbugsReports")
        effort = "max"
        reportLevel = "high"
    }
    spotbugsTest.enabled = false

    task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
        minSeverity = 'INFO'
        detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
        maxViolations = 0
        printViolations = true
        violations = [
                ["FINDBUGS", ".", ".*/reports/spotbugsReports/.*\\.xml", "Spotbugs"],
                ["CHECKSTYLE", ".", ".*/reports/checkstyleReports/.*\\.xml", "Checkstyle"]
        ]
    }
    check.finalizedBy violations

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']

    dependencies {
        testCompile(
                "junit:junit:${project.junitVersion}",
                'org.mockito:mockito-core:3.0.0',
                "org.springframework:spring-test:${springVersion}"
        )

    }

    test {
        jvmArgs '-XX:+UseConcMarkSweepGC', '-XX:+CMSClassUnloadingEnabled'
        minHeapSize = "128m"
        maxHeapSize = "512m"
        testLogging {
            exceptionFormat = 'full'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
    }
    tasks.withType(Javadoc) {
        options.encoding = 'utf-8'
    }

}

if (Boolean.parseBoolean(enablePublishing)) {
    apply plugin: 'io.codearte.nexus-staging'

    nexusStaging {
        packageGroup = 'org.mapfish'
        serverUrl = "https://$host/service/local/"
        username = sonatypeUsername
        password = sonatypePassword
        numberOfRetries = 200
    }
}
