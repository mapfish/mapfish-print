buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.5"
        classpath "se.bjurr.violations:violations-gradle-plugin:1.52.2"
        classpath 'org.owasp:dependency-check-gradle:7.4.3'
    }
}

defaultTasks 'build'

wrapper {
    gradleVersion = '6.9.3'
    distributionType = Wrapper.DistributionType.ALL
}

allprojects {
    group = group
    version = version

    apply plugin: 'org.owasp.dependencycheck'
    dependencyCheck {
        outputDirectory = "security-report"
    }
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:2.0.2'
    }
}

apply plugin: 'org.owasp.dependencycheck'

configure(subprojects.findAll { ['core', 'examples'].contains(it.name) }) {
    apply plugin: 'java'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply plugin: 'checkstyle'
    apply plugin: 'se.bjurr.violations.violations-gradle-plugin'

    jar.dependsOn(checkstyleMain)

    checkstyle {
        toolVersion = "10.6.0" // com.puppycrawl.tools:checkstyle
        configFile = file("$rootProject.rootDir/checkstyle_checks.xml")
        configProperties = ['basedir': project.rootDir.path]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/reports/checkstyleReports")
    }
    checkstyleTest.enabled = false

    spotbugs {
        toolVersion = "4.7.3" // com.github.spotbugs:spotbugs-annotations
        ignoreFailures = true
        reportsDir = file("$project.buildDir/reports/spotbugsReports")
        effort = "max"
        reportLevel = "high"
    }
    spotbugsTest.enabled = false

    task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
        minSeverity = 'INFO'
        detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
        maxViolations = 0
        printViolations = true
        violations = [
                ["FINDBUGS", ".", ".*/reports/spotbugsReports/.*\\.xml", "Spotbugs"],
                ["CHECKSTYLE", ".", ".*/reports/checkstyleReports/.*\\.xml", "Checkstyle"]
        ]
    }
    check.finalizedBy violations

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']

    dependencies {
        testCompile(
                "junit:junit:4.13.2",
                'org.mockito:mockito-core:4.11.0',
        )
    }

    test {
        jvmArgs '-XX:+CMSClassUnloadingEnabled'
        minHeapSize = "128m"
        maxHeapSize = "512m"
        testLogging {
            exceptionFormat = 'full'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
    }
    tasks.withType(Javadoc) {
        options.encoding = 'utf-8'
    }
}
