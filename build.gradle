defaultTasks 'build'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
    scriptFile = "generated-gradlew"
}

allprojects {
    group = 'org.mapfish.print'
    version = '3.16.0'
    ext.junitVersion = "4.12"
    ext.springVersion = "4.3.15.RELEASE"
    ext.jasperReportVersion = "6.5.1"
    ext.groovyVersion = "2.4.15"
    ext."signing.keyId" = signing_keyId
    ext."signing.secretKeyRingFile" = signing_secretKeyRingFile
    ext."signing.password" = signing_password
}

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'org.akhikhl.gretty:gretty:1.4.2'
  }
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:2.0.2'
    }
}

apply plugin: 'org.akhikhl.gretty'

import org.akhikhl.gretty.AppStartTask
task appRun(type: AppStartTask) {
}

configure(subprojects.findAll {['core', 'examples', 'docs'].contains(it.name)}) {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {url "http://download.osgeo.org/webdav/geotools"}
        maven {url "https://dl.bintray.com/readytalk/maven"}
        maven {url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts"}
        maven {url "http://maven.geo-solutions.it"}
        maven {url "https://jaspersoft.artifactoryonline.com/jaspersoft/jr-ce-releases"}
        maven {url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/"}
    }
}
configure(subprojects.findAll {['core', 'examples'].contains(it.name)}) {
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply plugin: 'checkstyle'

    jar.dependsOn(checkstyleMain, findbugsMain)

    checkstyle {
        toolVersion = "7.8.2"
        configFile = file("$rootProject.rootDir/checkstyle_checks.xml")
        configProperties = ['basedir': project.rootDir.path]
        ignoreFailures = false
        reportsDir = file("$project.buildDir/reports/checkstyleReports")
    }
    checkstyleTest.enabled = false

    String fullVersion = System.getProperty("java.specification.version");
    String findbugsToolVersion = "3.0.1"
    if (fullVersion.startsWith("1.6")) {
        findbugsToolVersion = "2.0.3"
    }

    findbugs {
        toolVersion = findbugsToolVersion
        ignoreFailures = false
        reportsDir = file("$project.buildDir/reports/findbugsReports")
        effort = "max"
        reportLevel = "high"
        excludeFilter = file("$rootProject.projectDir/findbugs-exclude.xml")
    }
    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
    findbugsTest.enabled = false

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']

    dependencies {
        testCompile (
                "junit:junit:${project.junitVersion}",
                'org.mockito:mockito-core:2.22.0',
                "org.springframework:spring-test:${springVersion}"
        )

    }

    test {
        jvmArgs '-XX:+UseConcMarkSweepGC', '-XX:+CMSClassUnloadingEnabled'
        minHeapSize = "128m"
        maxHeapSize = "512m"
        testLogging {
            exceptionFormat = 'full'
        }
    }

    sourceSets {
        test {
            output.resourcesDir = output.classesDir
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "utf-8"
    }
    tasks.withType(Javadoc) {
        options.encoding = "utf-8"
    }

}
