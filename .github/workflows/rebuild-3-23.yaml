name: Rebuild 3.23

on:
  schedule:
    - cron: '0 0 * * *'

jobs:
  rebuild:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    name: Rebuild 3.23

    env:
      SUMMON_PROVIDER: /usr/local/bin/gopass

    strategy:
      fail-fast: false
      matrix:
        branch:
          - '3.23'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branch }}

      - name: Get tag
        id: tag2
        uses: frabert/replace-string-action@v1.1
        with:
          pattern: 'refs/tags/(.*)'
          string: '{{ github.ref }}'
          replace-with: '$1'
        if: "startsWith(github.ref, 'refs/tags/')"
      - run: echo --${{ steps.tag2.outputs.replaced }}--

      - uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: Install OS dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/*.list
          sudo apt update
          sudo apt install fonts-liberation python3-wheel python3-setuptools

      - uses: camptocamp/initialise-gopass-summon-action@v2
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GOPASS_CI_GITHUB_TOKEN}}
          patterns: docker
      - run: gpg --export-secret-keys --armor D121AF2DFA8E140688BD968930C9B913FD42EF13 > CI.asc

      - run: echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - run: python3 -m pip install --user --requirement=ci/requirements.txt

      - name: Checks
        run: c2cciutils-checks

      - name: Install Cadastra fonts for OEREB example
        run: sudo cp -r examples/src/test/resources/examples/oereb/fonts/Cadastra/ /usr/share/fonts/truetype/

      - run: echo "enablePublishing=true" > gradle.properties
      - run: ./gradlew build

      - uses: actions/upload-artifact@v1
        with:
          name: Test results
          path: core/build/resources/actual
        if: always()
      - uses: actions/upload-artifact@v1
        with:
          name: Reports examples
          path: examples/build/reports
        if: always()
      - uses: actions/upload-artifact@v1
        with:
          name: Reports core
          path: core/build/reports
        if: always()
      - uses: actions/upload-artifact@v1
        with:
          name: Examples
          path: examples/build/resources/test/examples
        if: always()

      - name: Collect test results
        run: |
          mkdir -p /tmp/test_results/junit
          find . -name '*TEST-*.xml' -exec cp -v {} /tmp/test_results/junit/ \;
        if: failure()
      - uses: actions/upload-artifact@v1
        with:
          name: Test results
          path: /tmp/test_results
        if: failure()

      - run: ./gradlew --console=plain validateDocker

      - name: Publish
        run: c2cciutils-publish --type=rebuild --branch=${{ matrix.branch }}

      - run: ./gradlew :core:libSourcesJar
        if: "startsWith(github.ref, 'refs/tags/')"
      - run: ./gradlew :core:libJavadocJar
        if: "startsWith(github.ref, 'refs/tags/')"
      - id: version
        run: echo "##[set-output name=version;]$(grep version build.gradle|sed "s/ \+version = .\(.*\)./\1/g")"
      - id: tag
        run: echo "##[set-output name=tag;]$(echo github.ref|sed 's%refs/tags/%%g')"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
        if: "startsWith(github.ref, 'refs/tags/')"
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/libs/print-servlet-${{ steps.version.outputs.version }}.war
          asset_name: print-servlet-${{ steps.version.outputs.version }}.war
          asset_content_type: application/java-archive
        if: "startsWith(github.ref, 'refs/tags/')"
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/distributions/core-${{ steps.version.outputs.version }}.zip
          asset_name: print-cli-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip
        if: "startsWith(github.ref, 'refs/tags/')"
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/libs/print-lib-${{ steps.version.outputs.version }}.jar
          asset_name: print-lib-${{ steps.version.outputs.version }}.jar
          asset_content_type: application/java-archive
        if: "startsWith(github.ref, 'refs/tags/')"
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/libs/print-lib-${{ steps.version.outputs.version }}-sources.jar
          asset_name: print-lib-${{ steps.version.outputs.version }}-sources.jar
          asset_content_type: application/java-archive
        if: "startsWith(github.ref, 'refs/tags/')"
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/libs/print-lib-${{ steps.version.outputs.version }}-javadoc.jar
          asset_name: print-lib-${{ steps.version.outputs.version }}-javadoc.jar
          asset_content_type: application/java-archive
        if: "startsWith(github.ref, 'refs/tags/')"
